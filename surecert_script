#!/bin/bash
#**********************************************************************************************************************************
# Name:    surecert
# Version: 10.0 
# Purpose: This tool is used for enrolling & renewing SSL certificates for the hostagents & webdispatcher via Venafi.
# Author:  Sudhanshu Shekhar
# Support: sudhanshu.shekhar@company.com
#**********************************************************************************************************************************
#**********************************************************************************************************************************
# Change history:
#   May 15, 2019, version 1.0, Initial thought flow and development, basic version on scribe.
#   May 17, 2019, version 2.0, Re-designed & public version developed.
#   May 18, 2019, Version 3.0, Added password encryption-decryption for the tpp-password-file.
#   May 19, 2019, Version 4.0, Added Blinkers, Highlighters & Hostagent Log Validation.
#   May 22, 2019, Version 5.0, Made executable from a central location, added more info & checks.
#   May 23, 2019, Version 6.0, Released Hostagent module.
#   May 28, 2019, Version 7.0, Ready for LaMa Integration for hostagent module.
#   Aug 28, 2019, Version 8.0, Released webdispatcher module.
#   Sep 29, 2019, Version 9.0, Fixed credentials check for webdispatcher module.
#	Mar 04, 2020, Version 10.0, Added sap-sid-ci.company.com in the subject alternative names for webdisp module.
#   Tested On - RHEL & SUSE Linux
#**********************************************************************************************************************************

#==================================================
# Current Tool version
#==================================================
tool_version="10.0"
tool_scope="(Designed for SAP Hostagents & Webdispatchers, Tested On - RHEL & SUSE Linux)"
#==================================================

#==================================================
# Email recipients
#==================================================
mailreceiver=sudhanshu.shekhar@company.com
#==================================================

#==================================================
# Set Global Variables for the tool & its functions
#==================================================
TOOL_NAME=${0}
ACTION=${1}
MODULE=${2}
OPTION=${3}
NUMBER_INPUTS="$#"
#surecert_DIR="/usr/sap/hostctrl/exe/surecert"
surecert_DIR="`pwd`"
STARTTIME=`date +%s`
#==================================================

#==================================================
# Function: tool_help()
# Purpose: provide a detailed usage instruction to the user
tool_help()
{
    #clear
    cat ${surecert_DIR}/config/magic-banner
    echo ""
    echo -e "\e[34mAUTHOR:\e[0m Sudhanshu Shekhar"
    echo -e "\e[34mEMAIL:\e[0m sudhanshu.shekhar@company.com"
    echo ""
    echo ""
    echo -e "\e[34mNAME:\e[0m surecert - ${tool_version} \e[31m\e[5m ${tool_scope} \e[0m"
    echo -e "\e[34mDESCRIPTION:\e[0m This tool is used for automated enrollment & renewal of  SSL certificates for the hostagents & webdispatchers via VENAFI Certificate Authority."
    echo ""
    echo -e "\e[34mPREREQUISITES TO USE THIS TOOL:\e[0m"
    echo "1. company TLS CA Certificate is installed on the server where you want to run this tool."
    echo "2. You have read & understood the Confluence wiki on how to use and operate surecert for hostagents or webdispatchers."
    echo ""
    echo -e "\e[34mTOOL USAGE:\e[0m"
    echo -e "\e[34m==========:\e[0m"
    echo -e "\e[31mFor Hostagents (Run me as "root" user only):\e[0m"
    echo -e "01 - If you are trying to enroll and enable SSL certificate for hostagent for the first time using surecert, as \e[34m\e[5mroot\e[0m  user run me like this - "
    echo "./surecert ENROLL hostagent"
    echo -e "02 - If you are trying to renew the expiring SSL certificate for hostagent which was registered using surecert last time, as \e[34m\e[5mroot\e[0m user run me like this - "
    echo "./surecert RENEW hostagent"
    echo ""
    echo ""
    echo -e "\e[31mFor Webdispatchers (Run me as "w**adm" user only):\e[0m"
    echo -e "01 - If you are trying to enroll and enable SSL certificate for webdispatcher for the first time using surecert, as \e[34m\e[5mw**adm\e[0m  user run me like this - "
    echo "./surecert ENROLL webdisp"
    echo -e "02 - If you are trying to renew the expiring SSL certificate for hostagent which was registered using surecert last time, as \e[34m\e[5mw**adm\e[0m user run me like this - "
    echo "./surecert RENEW webdisp"
    echo ""
    echo -e "\e[34mOPTIONS:\e[0m"
    echo "        -help               - for displaying the tool help page "
    echo "        -h                  - for displaying the tool help page "
    echo "        -version            - for displaying the tool version information "
    echo "        -v                  - for displaying the tool version information "
    echo "        -u                  - for displaying usage information "
    echo "        -usage              - for displaying usage information "
    echo ""
    exit 0
}
# END OF FUNCTION
#==================================================

#==================================================
# Function: tool_version()
# Purpose: Tool version page display
tool_version()
{
    clear
    cat ${surecert_DIR}/config/magic-banner
    echo ""
    echo -e "\e[34mCurrent Version:\e[0m ${tool_version} \e[31m\e[5m ${tool_scope} \e[0m"
    echo ""
    echo -e "\e[34mChange History:\e[0m"
    echo "  May 15, 2019, version 1.0, Initial thought flow and development, basic version on scribe."
    echo "  May 17, 2019, version 2.0, Re-designed & public version developed."
    echo "  May 18, 2019, Version 3.0, Added password encryption-decryption for the tpp-password-file."
    echo "  May 19, 2019, Version 4.0, Added Blinkers, Highlighters & Hostagent Log Validation."
    echo "  May 22, 2019, Version 5.0, Made executable from a central location, added more info & checks."
    echo "  May 23, 2019, Version 6.0, Released Hostagent module."	
    echo "  May 28, 2019, Version 7.0, Ready for LaMa Integration for hostagent module."
    echo "  Aug 28, 2019, Version 8.0, Released webdispatcher module."
    echo "  Sep 23, 2019, Version 9.0, Fixed credentials check for webdispatcher module."
    echo "  Mar 04, 2020, Version 10.0, Added sap-sid-ci.company.com in the subject alternative names for webdisp module."
    echo ""
    echo -e "\e[34mAUTHOR:\e[0m Sudhanshu Shekhar"
    echo -e "\e[34mEMAIL:\e[0m sudhanshu.shekhar@company.com"
    echo ""
    exit 0
}
# END OF FUNCTION
#==================================================

#==================================================
# Function: tool_input_check()
# Purpose: Tool input check
tool_input_check()
{
clear
#cat ${surecert_DIR}/config/magic-banner
echo ""
echo ""
   if [ "${NUMBER_INPUTS}" -eq 2 ] ;then
                # Verify if the user input for ACTION is "ENROLL or RENEW" and for MODULE is "hostagent or webdisp" :: ERROR-TRAP
                        if [[ ${ACTION} == ENROLL ]] || [[ ${ACTION} == RENEW ]] && [[ ${MODULE} == hostagent ]] || [[ ${MODULE} == webdisp ]] ; then
                            surecert_INPUT_RC=0
                            # Verify the arguments and call the specific certificate enrollment function
                            if [[ ${ACTION} == ENROLL ]] || [[ ${ACTION} == RENEW ]] && [[ ${MODULE} == webdisp ]] ; then                            
                                # Call the webdisp function for certificate enrollment
				                cat ${surecert_DIR}/config/magic-banner
                                echo -e "\e[34mINFO:\e[0m Starting Certificate ${ACTION} for ${MODULE} at: `date`"
                                echo -e "\e[34mINFO:\e[0m You are using surecert tool - ${tool_version} ${tool_scope}."
                                echo -e "\e[34mINFO:\e[0m You have executed: ${TOOL_NAME} ${ACTION} ${MODULE}"
                                perform_cert_enroll_web
                            elif [[ ${ACTION} == ENROLL ]] || [[ ${ACTION} == RENEW ]] && [[ ${MODULE} == hostagent ]] ; then
                                # Call the hostagent function for certificate enrollment
                                cat ${surecert_DIR}/config/magic-banner
                                echo -e "\e[34mINFO:\e[0m Starting Certificate ${ACTION} for ${MODULE} at: `date`"
                                echo -e "\e[34mINFO:\e[0m You are using surecert tool - ${tool_version} ${tool_scope}."
                                echo -e "\e[34mINFO:\e[0m You have executed: ${TOOL_NAME} ${ACTION} ${MODULE}"
                                perform_cert_enroll_host
                            else
                                surecert_INPUT_RC=1
                                echo -e "\e[31m\e[5mError Detected:\e[0m Check the arguments provided to the tool & retry."
                                echo ""
                                echo ""
                                echo ""
                                echo -e "\e[34mRefer to the tool help below -->\e[0m"
                                echo ""
                                echo ""
                                tool_help                                
                            fi
                        else
                                surecert_INPUT_RC=1
				                echo -e "\e[31m\e[5mError Detected:\e[0m Check the arguments provided to the tool & retry."
                                echo ""
                                echo ""
                                echo ""
				                echo -e "\e[34mRefer to the tool help below -->\e[0m"
				                echo ""
				                echo ""
                                tool_help

                        fi
        else
	echo -e "\e[31m\e[5mError Detected:\e[0m Check the arguments provided to the tool & retry."
	echo -e "\e[34mRefer to the tool help below -->\e[0m"
	echo ""
	echo ""
        tool_help
   fi
}
# END OF FUNCTION
#==================================================

#==================================================
# Function: perform_cert_enroll_host()
# Purpose: Start performing the enrollment of SSL certificates for the hostagent.
perform_cert_enroll_host()
{
    EXECUTOR=`whoami`
    echo ""
    echo ""
    if [ "${EXECUTOR}" == root ] ;then
        echo -e "\e[34mINFO:\e[0m Starting the SSL certificate enrollment for the hostagent on `hostname -f`. Please wait.. "
        echo ""
        #sleep 3
        # Declare the base directory
        BASE_DIR="/usr/sap/hostctrl/exe"
        mkdir ${BASE_DIR}/sec

        # Create an intermediate SEC directory for the hostagent & set the ownership to sapadm:sapsys
        rm -rf ${BASE_DIR}/sec_xact # Remove any old sec_xact directory
        mkdir ${BASE_DIR}/sec_xact
        chown sapadm:sapsys ${BASE_DIR}/sec_xact

        # Export the intermediate SEC directory as SECUDIR
        export LD_LIBRARY_PATH=${BASE_DIR}
        export SECUDIR=${BASE_DIR}/sec_xact
        cd ${BASE_DIR}/sec_xact
        echo -e "\e[34mINFO:\e[0m My present working directory is ${BASE_DIR}/sec_xact"

        #Set Variables for the sapgenpse command
        #e.g. sid=lap
        sid=`hostname | cut -c 4-6`
        #e.g. SID=LAP
        SID=`hostname | cut -c 4-6 | tr [:lower:] [:upper:]`
        #e.g. TYPE=db*,ci*, pas, web, aas
        TYPE=`hostname | cut -c 7-9`
                        # Set the correct TYPE_SET of the server usage, if its a DB/CI/PAS/WEB or an AAS server.
                        if [[ ${TYPE} == db* ]] ; then
                                TYPE_SET=db
                                echo -e "\e[34mINFO:\e[0m Looks like this server is used as a ${TYPE_SET}"
                        elif [[ ${TYPE} == ci* ]] ; then
                                TYPE_SET=ci
                                echo -e "\e[34mINFO:\e[0m Looks like this server is used as a ${TYPE_SET}"
                        else
                                TYPE_SET=${TYPE}
                                echo -e "\e[34mINFO:\e[0m Looks like this server is used as a ${TYPE_SET}"
                        fi
        #e.g. DOMAIN=tas.company.com, *ma.company.com, aws.company.com, company.com, 
        DOMAIN_SET=`hostname -f | cut -c $(hostname -s | wc -c )- | cut -c 2-` 
        #DOMAIN=`hostname -f | rev | cut -c 1-12 | rev`
                        # Set the correct DOMAIN_SET of the server usage, if its on tas.company.com/ma.company.com or aws.company.com.
                        #if [[ ${DOMAIN} == "tas.company.com" ]] ; then
                                #DOMAIN_SET=${DOMAIN}
                                #echo -e "\e[34mINFO:\e[0m Looks like this server is registered in ${DOMAIN_SET}"
                        #elif [[ ${DOMAIN} == "pma.company.com" ]] ; then
                                #DOMAIN_SET="usw2.sapma.company.com"
                                #echo -e "\e[34mINFO:\e[0m Looks like this server is registered in ${DOMAIN_SET}"
                        #elif [[ ${DOMAIN} == "aws.company.com" ]] ; then
                                #DOMAIN_SET="usw2.sapaws.company.com"
                                #echo -e "\e[34mINFO:\e[0m Looks like this server is registered in ${DOMAIN_SET}"
                        #elif [[ ${DOMAIN} == "sap.company.com" ]] ; then
                                #DOMAIN_SET="ush.sap.company.com"
                                #echo -e "\e[34mINFO:\e[0m Looks like this server is registered in ${DOMAIN_SET}"
                        #else
                                #DOMAIN_SET="company.com"
                                #echo -e "\e[34mINFO:\e[0m Looks like this server is registered in ${DOMAIN_SET}"
                        #fi
        

        # Generate the SAPSSLS.pse now
        sudo -u sapadm LD_LIBRARY_PATH=${BASE_DIR} SECUDIR=${BASE_DIR}/sec_xact ${BASE_DIR}/sapgenpse gen_pse -p ${BASE_DIR}/sec_xact/SAPSSLS.pse -x companynw04 -r ${BASE_DIR}/sec_xact/`hostname`_hostagent.csr -k GN-dNSName:`hostname -f` -k GN-dNSName:sap-${sid}-${TYPE_SET}.${DOMAIN_SET} -k GN-dNSName:sap-${sid}-${TYPE_SET}.company.com "CN=`hostname -f`,OU=SAP,O=company,L=BEAVERTON,C=US"
                # Verify if the SAPSSLS.pse file has been generated
        SAPSSLS_FILE="${BASE_DIR}/sec_xact/SAPSSLS.pse"
                if [ ! -f "${SAPSSLS_FILE}" ] ; then
            echo -e "\e[31m\e[5mError Detected:\e[0m SAPSSLS.pse could not be created, please check, cancelling this run & exiting."
            exit
                else
                echo -e "\e[34mINFO:\e[0m SAPSSLS.pse has been created, moving ahead to ${ACTION} the certificate in VENAFI portal."
                fi

	# Begin the certificate Renewal/Enrollment
	if [[ ${ACTION} == RENEW ]] ; then
		# Set variable for the certificate nickname counter
		old_cert_count="`cat ${BASE_DIR}/sec/pickup-id | rev | cut -c 1-2 | rev`"
		new_cert_count=$(( ${old_cert_count} + 1 ))
		echo -e "\e[34mINFO:\e[0m Nickname for this certficate in VENAFI portal will be `hostname`-Hostagent-`date +"%m-%d-%y"`-0${new_cert_count}"
		echo ""
		echo ""

        	# RENEW the VENAFI certificate now
        	${surecert_DIR}/config/surecertapi enroll -tpp-url https://ven.company.com -tpp-user "`cat ${surecert_DIR}/config/tpp-username`" -tpp-password "`cat ${surecert_DIR}/config/tpp-password-file | base64 -d`" -z "`cat ${surecert_DIR}/config/tpp-zone-file`" -no-prompt -csr file:${BASE_DIR}/sec_xact/`hostname`_hostagent.csr -chain root-first -nickname `hostname`-Hostagent-`date +"%m-%d-%y"`-0${new_cert_count} -pickup-id-file ${BASE_DIR}/sec_xact/pickup-id -timeout 300

	else 
		# Set variable for the certificate nickname counter
		new_cert_count=0
		echo -e "\e[34mINFO:\e[0m Nickname for this certficate in VENAFI portal will be `hostname`-Hostagent-`date +"%m-%d-%y"`-0${new_cert_count}"
		echo ""
		echo ""

		# ENROLL the VENAFI certificate now
                ${surecert_DIR}/config/surecertapi enroll -tpp-url https://ven.company.com -tpp-user "`cat ${surecert_DIR}/config/tpp-username`" -tpp-password "`cat ${surecert_DIR}/config/tpp-password-file | base64 -d`" -z "`cat ${surecert_DIR}/config/tpp-zone-file`" -no-prompt -csr file:${BASE_DIR}/sec_xact/`hostname`_hostagent.csr -chain root-first -nickname `hostname`-Hostagent-`date +"%m-%d-%y"`-0${new_cert_count} -pickup-id-file ${BASE_DIR}/sec_xact/pickup-id -timeout 300

	fi

        # Verify if the pickup-id file has been generated
        PICK_FILE="${BASE_DIR}/sec_xact/pickup-id"
                if [ ! -f "${PICK_FILE}" ] ; then
            echo -e "\e[31m\e[5mError Detected:\e[0m Pickup ID file could not be created, please check, cancelling this run & exiting."
            exit
                else
		echo ""
                echo -e "\e[34mINFO:\e[0m Pickup ID credential file has been created, moving ahead to retreive the enrolled certificate."
		echo ""
                fi

        # Retrieve the enrolled certificate now
        ${surecert_DIR}/config/surecertapi pickup -tpp-url https://ven.company.com -tpp-user "`cat ${surecert_DIR}/config/tpp-username`" -tpp-password "`cat ${surecert_DIR}/config/tpp-password-file | base64 -d `" -z "`cat ${surecert_DIR}/config/tpp-zone-file`" -chain root-first -file ${BASE_DIR}/sec_xact/`hostname -f`_hostagent.pem -pickup-id-file ${BASE_DIR}/sec_xact/pickup-id
                # Verify if the certificate has been picked up successfully
        PEM_FILE="${BASE_DIR}/sec_xact/`hostname -f`_hostagent.pem"
                if [ ! -f "${PEM_FILE}" ] ; then
	    echo ""
            echo -e "\e[31m\e[5mError Detected:\e[0m Pem Certificate could not be retrieved, please check, cancelling this run & exiting."
            exit
                else
		echo ""
                echo -e "\e[34mINFO:\e[0m Pem Certificate has been created, moving ahead to import own certificate in the SAPSSLS.pse file."
		echo ""
                fi

        # Set the permissions & ownership of all the files created so far
        chmod 775 ${BASE_DIR}/sec_xact/`hostname -f`_hostagent.pem
        chown -R sapadm:sapsys ${BASE_DIR}/sec_xact/
        #sleep 3 

        # Import the PEM certificate into the SAPSSLS.pse now and verify
        sudo -u sapadm LD_LIBRARY_PATH=${BASE_DIR} SECUDIR=${BASE_DIR}/sec_xact ${BASE_DIR}/sapgenpse import_own_cert -p ${BASE_DIR}/sec_xact/SAPSSLS.pse -x companynw04 -c ${BASE_DIR}/sec_xact/`hostname -f`_hostagent.pem
        RC=$?
                if [ ${RC} -ne 0 ] ; then
		echo ""
                echo -e "\e[31m\e[5mError Detected:\e[0m Import Own Certificate has failed, please check, cancelling this run & exiting."
            exit
                else
                echo -e "\e[34mINFO:\e[0m Import Own Certificate has completed successfully, moving ahead to print the SAPSSLS.pse."
                fi

        # Get the final status of the SAPSSLS.pse file now
	echo -e "\e[34mINFO:\e[0m Here is how the SAPSSLS.pse looks with My Certificate, company Root & CA Certificate -"
	echo -e "\e[34mINFO:\e[0m Validate that ExtKeyUsage is \e[34m\e[5m ClientAuthentication ServerAuthentication.\e[0m"	
        sudo -u sapadm LD_LIBRARY_PATH=${BASE_DIR} SECUDIR=${BASE_DIR}/sec_xact ${BASE_DIR}/sapgenpse get_my_name -p ${BASE_DIR}/sec_xact/SAPSSLS.pse -x companynw04 -v | echo ""

        # Switch the SECUDIR now
	echo -e "\e[34mINFO:\e[0m Let me switch the SECUDIR now."
        rm -rf ${BASE_DIR}/sec_old_`date +"%m-%d-%y"`
        mv ${BASE_DIR}/sec ${BASE_DIR}/sec_old_`date +"%m-%d-%y"`
        mv ${BASE_DIR}/sec_xact ${BASE_DIR}/sec
        echo -e "\e[34mINFO:\e[0m Directoy switching for SECUDIR is complete now."
	echo -e "\e[34mINFO:\e[0m Below are the sec directories old & new, just for reference -"
	ls -ld ${BASE_DIR}/sec*

        # Create the server credential for sapadm user
	echo ""
	echo ""
	echo -e "\e[34mINFO:\e[0m Create the SSO credentials for the sapadm user on SAPSSLS.pse file."
	echo ""
        sudo -u sapadm LD_LIBRARY_PATH=${BASE_DIR} SECUDIR=${BASE_DIR}/sec ${BASE_DIR}/sapgenpse seclogin -p ${BASE_DIR}/sec/SAPSSLS.pse -x companynw04 -O sapadm

        # Verify if the credential file has been generated
        CRED_FILE="${BASE_DIR}/sec/cred_v2"
                if [ ! -f "${CRED_FILE}" ] ; then
                	echo -e "\e[31m\e[5mError Detected:\e[0m Credential file could not be created, please check, cancelling this run & exiting."
            		exit
                else
                	echo -e "\e[34mINFO:\e[0m cred_v2 SSO credential file has been created, moving ahead to restart the hostagent now."
                fi


        # Restart the hostagent
        echo -e "\e[34mINFO:\e[0m Let us restart the hostagent now - "
        ${BASE_DIR}/saphostexec -restart
        sleep 10
        echo -e "\e[34mINFO:\e[0m Hostagent has been restarted now, \e[34m validate that SSL is enabled and hostagent is listening on both the ports \e[5m 1128 & 1129.\e[0m"
	echo -e "\e[34mINFO:\e[0m I could find out the following from the Hostagent Startup Log for you -"
	grep -i .sapstream ${BASE_DIR}/../work/sapstartsrv.log

        # Run revoke for the old certificate
	echo ""
	echo ""
        echo "Looks like the surecert action is to ${ACTION} the certificate."
        if [[ ${ACTION} == RENEW ]] ; then
                echo -e "\e[34mINFO:\e[0m Let me revoke the old certificate from VENAFI portal - "
		echo ""
                OLD_SECUDIR="${BASE_DIR}/sec_old_`date +"%m-%d-%y"`"
                ${surecert_DIR}/config/surecertapi revoke -tpp-url https://ven.company.com -tpp-user "`cat ${surecert_DIR}/config/tpp-username`" -tpp-password "`cat ${surecert_DIR}/config/tpp-password-file | base64 -d`" -z "`cat ${surecert_DIR}/config/tpp-zone-file`" -id "`cat ${OLD_SECUDIR}/pickup-id`" -reason superseded
                echo ""
		ENDTIME=`date +%s`
		DIFFTIME=$((${ENDTIME} - ${STARTTIME}))
                echo -e "\e[34mINFO:\e[0m End Time stamp: `date`"
                echo -e "\e[34mINFO:\e[0m Congratulations, You have successfully completed SSL certificate renewal for the hostagent on `hostname -f` in just ${DIFFTIME} seconds."
		echo -e "\e[34mINFO:\e[0m New SSL Certificate - `hostname`-Hostagent-`date +"%m-%d-%y"`-0${new_cert_count} can be verified in Venafi Portal if needed."
		echo ""
		echo ""
		echo -e "\e[32mThank you for using\e[0 m\e[5m *** surecert ***\e[0m.\e[32m Please share your feedback with ${mailreceiver}.\e[0m"
                echo ""
                echo ""
        else
		echo -e "\e[34mINFO:\e[0m No Certificates to REVOKE as its the first time enrollment."
		echo ""
		ENDTIME=`date +%s`
                DIFFTIME="((${ENDTIME} - ${STARTTIME}))"
                echo -e "\e[34mINFO:\e[0m End Time stamp: `date`"
		echo ""
		echo ""
                echo -e "\e[34mINFO:\e[0m Congratulations, You have successfully completed SSL certificate enrollment for the hostagent on `hostname -f` in just ${DIFFTIME} seconds."
		echo -e "\e[34mINFO:\e[0m New SSL Certificate - `hostname`-Hostagent-`date +"%m-%d-%y"`-0${new_cert_count} can be verified in Venafi Portal if needed."
		echo ""
		echo ""
                echo -e "\e[32mThank you for using\e[0 m\e[5m *** surecert ***\e[0m.\e[32m Please share your feedback with ${mailreceiver}.\e[0m"
                echo ""
		echo ""
        fi
else
    clear
    echo -e "\e[31m\e[5mError Detected:\e[0m Please run me as "root" user for the hostagent module."
    echo ""
    echo ""
    echo ""
    echo -e "\e[34mRefer to the tool help below -->\e[0m"
    echo ""
    echo ""
        tool_help
   fi
exit 0
}
# END OF FUNCTION
#==================================================

#==================================================
# Function: perform_cert_enroll_web()
# Purpose: Start performing the enrollment of SSL certificates for the webdispatcher.
perform_cert_enroll_web_testingonly()       
{
    EXECUTOR=`whoami`
    echo "SAPSYSTEMNAME = ${SAPSYSTEMNAME}"
    echo "DIR_LIBRARY = ${DIR_LIBRARY}"
    echo "SECUDIR = ${SECUDIR} "
    if [ "${EXECUTOR}" == webadm ] || [ "${EXECUTOR}" == w**adm ] ; then
        echo -e "\e[34mINFO:\e[0m Starting the SSL certificate enrollment for the webdispatcher on `hostname -f`. Please wait.. "
        echo "" ###################### Working Here #######################
        #sleep 3
        # Declare the base directory
        #BASE_DIR="/usr/sap/hostctrl/exe"
        #mkdir ${BASE_DIR}/sec
else
    clear
    echo -e "\e[31m\e[5mError Detected:\e[0m Please run me as "webdispatcher" user for the webdispatcher module."
    echo -e "\e[34mRefer to the tool help below -->\e[0m"
        tool_help
   fi
exit 0
}
# END OF FUNCTION
#==================================================


#==================================================
# Function: perform_cert_enroll_web()
# Purpose: Start performing the enrollment of SSL certificates for the webdispatcher.
perform_cert_enroll_web()       
{
    EXECUTOR=`whoami`
    WEB_OWNER=`ps -ef | grep "pf=/usr/sap/W" | grep -v grep | awk '{print $9}' | cut -c 13-15 | head -1 | tr '[:upper:]' '[:lower:]'`adm
    WEB_SID=`ps -ef | grep "pf=/usr/sap/W" | grep -v grep | awk '{print $9}' | cut -c 13-15 | head -1`
    web_sid=`ps -ef | grep "pf=/usr/sap/W" | grep -v grep | awk '{print $9}' | cut -c 13-15 | head -1 | tr '[:upper:]' '[:lower:]'`
    DEPLOY_TYPE=`ps -ef | grep "pf=/usr/sap/W" | grep -v grep | awk '{print $9}' | head -1 | awk -F'=/' '{print $NF}' | awk -F'/' '{print $4}'`

    echo "$EXECUTOR $WEB_OWNER $WEB_SID $DEPLOY_TYPE"
    echo ""
    echo ""
    if [ "${EXECUTOR}" == ${WEB_OWNER} ] &&  [ "${DEPLOY_TYPE}" != sapwebdisp ] ; then
        echo -e "\e[34mINFO:\e[0m Starting the SSL certificate enrollment for the webdispatcher on `hostname -f`. Please wait.. "
        echo "" 
        #sleep 3
        # Declare the SEC, EXE & BASE directories
        SEC_DIR="`echo ${SECUDIR}`"
        EXE_DIR="`echo ${DIR_LIBRARY}`"
        BASE_DIR="`echo $SECUDIR | awk -F'/' '{print $1 "/"$2 "/"$3 "/"$4 "/"$5}'`"

        #mkdir ${BASE_DIR}/sec

        # Create an intermediate SEC directory for the webdispatcher & set the ownership to WEB_OWNER:sapsys
        rm -rf ${BASE_DIR}/sec_xact # Remove any old sec_xact directory
        mkdir ${BASE_DIR}/sec_xact
        chown ${WEB_OWNER}:sapsys ${BASE_DIR}/sec_xact

        # Export the intermediate SEC directory as SECUDIR
        export LD_LIBRARY_PATH=${EXE_DIR}
        export SECUDIR=${BASE_DIR}/sec_xact
        cd ${BASE_DIR}/sec_xact
        echo -e "\e[34mINFO:\e[0m My present working directory is ${BASE_DIR}/sec_xact"

        #Set Variables for the sapgenpse command
        #e.g. sid=lap
        sid=`hostname | cut -c 4-6`
        #e.g. SID=LAP
        SID=`hostname | cut -c 4-6 | tr [:lower:] [:upper:]`
        
        # Set the correct TYPE_SET of the server usage, Note - for webdisp module, it will always be web.
        TYPE_SET="web"
        #echo -e "\e[34mINFO:\e[0m I will create an alternate name for  ${TYPE_SET}"
                       
        # Set the correct DOMAIN_SET of the server usage, if its on tas.company.com/sapma.company.com or aws.company.com.  
        DOMAIN_SET=`hostname -f | cut -c $(hostname -s | wc -c )- | cut -c 2-`

        # Generate the SAPSSLS.pse now
       # ${EXE_DIR}/sapgenpse gen_pse -p ${BASE_DIR}/sec_xact/SAPSSLS.pse -x companynw04 -r ${BASE_DIR}/sec_xact/`hostname`_webdisp.csr -k GN-dNSName:`hostname -f` -k GN-dNSName:sap-${sid}-${TYPE_SET}.${DOMAIN_SET} -k GN-dNSName:sap-${sid}-${TYPE_SET}.company.com -k GN-dNSName:sap-ssq-sso.company.com -k GN-dNSName:sapssqci-lb.usw2.sapma.company.com "CN=`hostname -f`,OU=SAP,O=company,L=BEAVERTON,C=US"

${EXE_DIR}/sapgenpse gen_pse -p ${BASE_DIR}/sec_xact/SAPSSLS.pse -x companynw04 -r ${BASE_DIR}/sec_xact/`hostname`_webdisp.csr -k GN-dNSName:`hostname -f` -k GN-dNSName:sap-${sid}-${TYPE_SET}.${DOMAIN_SET} -k GN-dNSName:sap-${sid}-${TYPE_SET}.company.com -k GN-dNSName:sap-${sid}-ci.company.com "CN=`hostname -f`,OU=SAP,O=company,L=BEAVERTON,C=US"

        # Verify if the SAPSSLS.pse file has been generated
        SAPSSLS_FILE="${BASE_DIR}/sec_xact/SAPSSLS.pse"
                if [ ! -f "${SAPSSLS_FILE}" ] ; then
            echo -e "\e[31m\e[5mError Detected:\e[0m SAPSSLS.pse could not be created, please check, cancelling this run & exiting."
            exit
                else
                echo -e "\e[34mINFO:\e[0m SAPSSLS.pse has been created, moving ahead to ${ACTION} the certificate in VENAFI portal."
                fi

    # Begin the certificate Renewal/Enrollment
    if [[ ${ACTION} == RENEW ]] ; then
        # Set variable for the certificate nickname counter
        old_cert_count="`cat ${BASE_DIR}/sec/pickup-id | rev | cut -c 1-2 | rev`"
        new_cert_count=$(( ${old_cert_count} + 1 ))
        echo -e "\e[34mINFO:\e[0m Nickname for this certficate in VENAFI portal will be `hostname`-Webdisp-`date +"%m-%d-%y"`-0${new_cert_count}"
        echo ""
        echo ""

            # RENEW the VENAFI certificate now
            ${surecert_DIR}/config/surecertapi enroll -tpp-url https://ven.company.com -tpp-user "`cat ${surecert_DIR}/config/tpp-username`" -tpp-password "`cat ${surecert_DIR}/config/tpp-password-file | base64 -d`" -z "`cat ${surecert_DIR}/config/tpp-zone-file`" -no-prompt -csr file:${BASE_DIR}/sec_xact/`hostname`_webdisp.csr -chain root-first -nickname `hostname`-Webdisp-`date +"%m-%d-%y"`-0${new_cert_count} -pickup-id-file ${BASE_DIR}/sec_xact/pickup-id -timeout 300

    else 
        # Set variable for the certificate nickname counter
        new_cert_count=0
        echo -e "\e[34mINFO:\e[0m Nickname for this certficate in VENAFI portal will be `hostname`-Webdisp-`date +"%m-%d-%y"`-0${new_cert_count}"
        echo ""
        echo ""

        # ENROLL the VENAFI certificate now
        ${surecert_DIR}/config/surecertapi enroll -tpp-url https://ven.company.com -tpp-user "`cat ${surecert_DIR}/config/tpp-username`" -tpp-password "`cat ${surecert_DIR}/config/tpp-password-file | base64 -d`" -z "`cat ${surecert_DIR}/config/tpp-zone-file`" -no-prompt -csr file:${BASE_DIR}/sec_xact/`hostname`_webdisp.csr -chain root-first -nickname `hostname`-Webdisp-`date +"%m-%d-%y"`-0${new_cert_count} -pickup-id-file ${BASE_DIR}/sec_xact/pickup-id -timeout 300

    fi

        # Verify if the pickup-id file has been generated
        PICK_FILE="${BASE_DIR}/sec_xact/pickup-id"
                if [ ! -f "${PICK_FILE}" ] ; then
            echo -e "\e[31m\e[5mError Detected:\e[0m Pickup ID file could not be created, please check, cancelling this run & exiting."
            exit
                else
        echo ""
                echo -e "\e[34mINFO:\e[0m Pickup ID credential file has been created, moving ahead to retreive the enrolled certificate."
        echo ""
                fi

        # Retrieve the enrolled certificate now
        ${surecert_DIR}/config/surecertapi pickup -tpp-url https://ven.company.com -tpp-user "`cat ${surecert_DIR}/config/tpp-username`" -tpp-password "`cat ${surecert_DIR}/config/tpp-password-file | base64 -d `" -z "`cat ${surecert_DIR}/config/tpp-zone-file`" -chain root-first -file ${BASE_DIR}/sec_xact/`hostname -f`_webdisp.pem -pickup-id-file ${BASE_DIR}/sec_xact/pickup-id

        # Verify if the certificate has been picked up successfully
        PEM_FILE="${BASE_DIR}/sec_xact/`hostname -f`_webdisp.pem"
                if [ ! -f "${PEM_FILE}" ] ; then
        echo ""
            echo -e "\e[31m\e[5mError Detected:\e[0m Pem Certificate could not be retrieved, please check, cancelling this run & exiting."
            exit
                else
        echo ""
                echo -e "\e[34mINFO:\e[0m Pem Certificate has been created, moving ahead to import own certificate in the SAPSSLS.pse file."
        echo ""
                fi

        # Set the permissions & ownership of all the files created so far
        chmod 775 ${BASE_DIR}/sec_xact/`hostname -f`_webdisp.pem
        chown -R ${WEB_OWNER}:sapsys ${BASE_DIR}/sec_xact/
        #sleep 3 

        # Import the PEM certificate into the SAPSSLS.pse now and verify
        ${EXE_DIR}/sapgenpse import_own_cert -p ${BASE_DIR}/sec_xact/SAPSSLS.pse -x companynw04 -c ${BASE_DIR}/sec_xact/`hostname -f`_webdisp.pem
                RC=$?
                if [ ${RC} -ne 0 ] ; then
        echo ""
                echo -e "\e[31m\e[5mError Detected:\e[0m Import Own Certificate has failed, please check, cancelling this run & exiting."
            exit
                else
                echo -e "\e[34mINFO:\e[0m Import Own Certificate has completed successfully, moving ahead to print the SAPSSLS.pse."
                fi

        # Get the final status of the SAPSSLS.pse file now
        echo -e "\e[34mINFO:\e[0m Here is how the SAPSSLS.pse looks with My Certificate, company Root & CA Certificate -"
        echo -e "\e[34mINFO:\e[0m Validate that ExtKeyUsage is \e[34m\e[5m ClientAuthentication ServerAuthentication.\e[0m" 
        ${EXE_DIR}/sapgenpse get_my_name -p ${BASE_DIR}/sec_xact/SAPSSLS.pse -x companynw04 -v | echo ""
        
        #Create the server credential for webdisp user
        SEC_DIR="`echo ${SECUDIR}`"
        EXE_DIR="`echo ${DIR_LIBRARY}`"
        BASE_DIR="`echo $SECUDIR | awk -F'/' '{print $1 "/"$2 "/"$3 "/"$4 "/"$5}'`"

        echo ""
        echo ""
        echo -e "\e[34mINFO:\e[0m Create the SSO credentials for the ${WEB_OWNER} user on SAPSSLS.pse file present in the xact directory."
        echo ""
        echo "My pse file is `ls -ld ${BASE_DIR}/sec_xact/SAPSSLS.pse`"
        ${EXE_DIR}/sapgenpse seclogin -p ${BASE_DIR}/sec_xact/SAPSSLS.pse -x companynw04 -O ${WEB_OWNER}
        
        sleep 10
        # Verify if the credential file has been generated
        CRED_FILE="${BASE_DIR}/sec_xact/cred_v2"
                if [ ! -f "${CRED_FILE}" ] ; then
                    echo -e "\e[31m\e[5mError Detected:\e[0m Credential file could not be created, please check, cancelling this run & exiting."
                    exit
                else
                    echo -e "\e[34mINFO:\e[0m cred_v2 SSO credential file has been created, moving ahead to restart the webdispatcher now."
                fi

        # Switch the SECUDIR now
        echo -e "\e[34mINFO:\e[0m Let me switch the SECUDIR now."
        rm -rf ${BASE_DIR}/sec_old_`date +"%m-%d-%y"`
        mv ${BASE_DIR}/sec ${BASE_DIR}/sec_old_`date +"%m-%d-%y"`
        mv ${BASE_DIR}/sec_xact ${BASE_DIR}/sec
        echo -e "\e[34mINFO:\e[0m Directoy switching for SECUDIR is complete now."
        echo ""
        echo ""
        echo -e "\e[34mINFO:\e[0m Below are the sec directories old & new, just for reference -"
        ls -ld ${BASE_DIR}/sec*



        echo "My pse file is `ls -ld ${BASE_DIR}/sec/SAPSSLS.pse`"
	echo "Regenerating the Credential file"
        # Declare the SEC, EXE & BASE directories
        SEC_DIR="`echo ${SECUDIR}`"
        EXE_DIR="`echo ${DIR_LIBRARY}`"
        BASE_DIR="`echo $SECUDIR | awk -F'/' '{print $1 "/"$2 "/"$3 "/"$4 "/"$5}'`"
        # Export the intermediate SEC directory as SECUDIR
        export LD_LIBRARY_PATH=${EXE_DIR}
        export SECUDIR=${BASE_DIR}/sec
        WEB_OWNER="`ps -ef | grep "pf=/usr/sap/W" | grep -v grep | awk '{print $9}' | cut -c 13-15 | head -1 | tr '[:upper:]' '[:lower:]'`adm"
	cd ${BASE_DIR}/sec
	echo "My present working directory is `pwd`."
	echo "Creating the SSO credential for ${WEB_OWNER} user on the ${BASE_DIR}/sec/SAPSSLS.pse file, i am executing this as `whoami`."
        ${EXE_DIR}/sapgenpse seclogin -p ${BASE_DIR}/sec/SAPSSLS.pse -x companynw04 -O ${WEB_OWNER}
	
	# Restart the webdispatcher
        WEB_INST_NO=`ps -ef | grep wd.sap | grep -v grep | awk '{print $8}' | awk -F'_W' '{print $NF}'`
        echo -e "\e[34mINFO:\e[0m Let us restart the webdispatcher running with instance# ${WEB_INST_NO} now - "
        ${EXE_DIR}/stopsap r3
        ${EXE_DIR}/sapcontrol -nr ${WEB_INST_NO} -function StopService
        ${EXE_DIR}/cleanipc ${WEB_INST_NO} remove    
        ${EXE_DIR}/startsap r3

        sleep 30
        echo -e "\e[34mINFO:\e[0m Webdispatcher has been restarted now, \e[34m validate that SSL is enabled and webdispatcher is listening on both the \e[5m HTTP/HTTPS ports. \e[0m"
        echo -e "\e[34mINFO:\e[0m I could find out the following from the Webdispatcher Startup Log for you -"
        grep -i "SAP Web Dispatcher up and operational" ${BASE_DIR}/work/dev_webdisp

        # Run revoke for the old certificate
        echo ""
        echo ""
        echo "Looks like the surecert action is to ${ACTION} the certificate."
        if [[ ${ACTION} == RENEW ]] ; then
                echo -e "\e[34mINFO:\e[0m Let me revoke the old certificate from VENAFI portal - "
                echo ""
                OLD_SECUDIR="${BASE_DIR}/sec_old_`date +"%m-%d-%y"`"
                ${surecert_DIR}/config/surecertapi revoke -tpp-url https://ven.company.com -tpp-user "`cat ${surecert_DIR}/config/tpp-username`" -tpp-password "`cat ${surecert_DIR}/config/tpp-password-file | base64 -d`" -z "`cat ${surecert_DIR}/config/tpp-zone-file`" -id "`cat ${OLD_SECUDIR}/pickup-id`" -reason superseded
                echo ""
                ENDTIME=`date +%s`
                DIFFTIME=$((${ENDTIME} - ${STARTTIME}))
                echo -e "\e[34mINFO:\e[0m End Time stamp: `date`"
                echo -e "\e[34mINFO:\e[0m Congratulations, You have successfully completed SSL certificate renewal for the webdispatcher on `hostname -f` in just ${DIFFTIME} seconds."
                echo -e "\e[34mINFO:\e[0m New SSL Certificate - `hostname`-Webdisp-`date +"%m-%d-%y"`-0${new_cert_count} can be verified in Venafi Portal if needed."
                echo ""
                echo ""
                echo -e "\e[32mThank you for using\e[0 m\e[5m *** surecert ***\e[0m.\e[32m Please share your feedback with ${mailreceiver}.\e[0m"
                echo ""
                echo ""
        else
                echo -e "\e[34mINFO:\e[0m No Certificates to REVOKE as its the first time enrollment."
                echo ""
                ENDTIME=`date +%s`
                DIFFTIME="((${ENDTIME} - ${STARTTIME}))"
                echo -e "\e[34mINFO:\e[0m End Time stamp: `date`"
                echo ""
                echo ""
                echo -e "\e[34mINFO:\e[0m Congratulations, You have successfully completed SSL certificate enrollment for the webdispatcher on `hostname -f` in just ${DIFFTIME} seconds."
                echo -e "\e[34mINFO:\e[0m New SSL Certificate - `hostname`-Webdisp-`date +"%m-%d-%y"`-0${new_cert_count} can be verified in Venafi Portal if needed."
                echo ""
                echo ""
                echo -e "\e[32mThank you for using\e[0 m\e[5m *** surecert ***\e[0m.\e[32m Please share your feedback with ${mailreceiver}.\e[0m"
                echo ""
                echo ""
        fi

elif [ "${EXECUTOR}" != ${WEB_OWNER} ] || [ "${EXECUTOR}" != root ] && [ "${DEPLOY_TYPE}" == sapwebdisp ] ; then 
    #### Provide SECUDIR
    #### Provide SID
    echo ""
    echo "Development for the old type of the installations, generally present in company's On-Primese SAP systems"
    echo ""
    #BASE_DIR="`ps -ef | grep "pf=/usr/sap/W" | grep -v grep | awk '{print $9}' | head -1 | awk -F'=/' '{print $NF}' | awk -F'/' '{print "/"$1 "/"$2 "/"$3 "/"$4}'`"
else
    clear
    echo -e "\e[31m\e[5mError Detected:\e[0m I am not supposed to be executed this way."
    echo ""
    echo ""
    echo ""
    echo -e "\e[34mRefer to the tool help below -->\e[0m"
    echo ""
    echo ""
        tool_help
   fi
exit 0
}
# END OF FUNCTION
#==================================================


#==================================================
#Main Body of the Tool

# Tool running options
case ${1} in
        -help)                   tool_help                                 ;;
        -usage)			         tool_help				                   ;;
        -version)                tool_version                              ;;
        -h)                      tool_help                                 ;;
        -v)                      tool_version                              ;;
        -u)			             tool_help				                   ;;	
        *)                       tool_input_check                          ;;
esac
#End of Main Body of the Tool
#==================================================
